
@page "/applicant-form"
@using SocialAssistanceFund.Models
@using SocialAssistanceFund.Services
@inject IApplicantService applicantService
@inject IGeoService geoService

<h3>Applicant Form</h3>

<EditForm Model="applicant" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Application Date</label>
        <InputDate class="form-control" @bind-Value="applicant.ApplicationDate" />
    </div>
    <div class="mb-3">
        <label>First Name</label>
        <InputText class="form-control" @bind-Value="applicant.FirstName" />
    </div>
    <div class="mb-3">
        <label>Middle Name</label>
        <InputText class="form-control" @bind-Value="applicant.MiddleName" />
    </div>
    <div class="mb-3">
        <label>Last Name</label>
        <InputText class="form-control" @bind-Value="applicant.LastName" />
    </div>
    <div class="mb-3">
        <label>Sex</label>
        <InputSelect class="form-control" @bind-Value="applicant.SexId">
            <option value="">-- Select --</option>
            @foreach (var sex in Sexes)
            {
                <option value="@sex.SexId">@sex.Description</option>
            }
        </InputSelect>
    </div>
    <div class="mb-3">
        <label>Age</label>
        <InputNumber class="form-control" @bind-Value="applicant.Age" />
    </div>
    <div class="mb-3">
        <label>Marital Status</label>
        <InputSelect class="form-control" @bind-Value="applicant.MaritalStatusId">
            <option value="">-- Select --</option>
            @foreach (var status in MaritalStatuses)
            {
                <option value="@status.MaritalStatusId">@status.Description</option>
            }
        </InputSelect>
    </div>
    <div class="mb-3">
        <label>ID/Passport Number</label>
        <InputText class="form-control" @bind-Value="applicant.IdNumber" />
    </div>

    <div class="mb-3">
        <label>County</label>
        <InputSelect class="form-control" @bind-Value="selectedCountyId" @onchange="OnCountyChanged">
            <option value="">-- Select --</option>
            @foreach (var county in Counties)
            {
                <option value="@county.CountyId">@county.CountyName</option>
            }
        </InputSelect>
    </div>
    <div class="mb-3">
        <label>Sub-County</label>
        <InputSelect class="form-control" @bind-Value="selectedSubCountyId" @onchange="OnSubCountyChanged">
            <option value="">-- Select --</option>
            @foreach (var subCounty in SubCounties)
            {
                <option value="@subCounty.SubCountyId">@subCounty.SubCountyName</option>
            }
        </InputSelect>
    </div>
    <div class="mb-3">
        <label>Location</label>
        <InputSelect class="form-control" @bind-Value="selectedLocationId" @onchange="OnLocationChanged">
            <option value="">-- Select --</option>
            @foreach (var location in Locations)
            {
                <option value="@location.LocationId">@location.LocationName</option>
            }
        </InputSelect>
    </div>
    <div class="mb-3">
        <label>Sub-Location</label>
        <InputSelect class="form-control" @bind-Value="selectedSubLocationId" @onchange="OnSubLocationChanged">
            <option value="">-- Select --</option>
            @foreach (var subLocation in SubLocations)
            {
                <option value="@subLocation.SubLocationId">@subLocation.SubLocationName</option>
            }
        </InputSelect>
    </div>
    <div class="mb-3">
        <label>Village</label>
        <InputSelect class="form-control" @bind-Value="applicant.VillageId" @onchange="OnVillagesChanged">
            <option value="">-- Select --</option>
            @foreach (var village in Villages)
            {
                <option value="@village.VillageId">@village.VillageName</option>
            }
        </InputSelect>
    </div>

    <div class="mb-3">
        <label>Postal Address</label>
        <InputText class="form-control" @bind-Value="applicant.PostalAddress" />
    </div>
    <div class="mb-3">
        <label>Physical Address</label>
        <InputText class="form-control" @bind-Value="applicant.PhysicalAddress" />
    </div>
    <div class="mb-3">
        <label>Phone Number</label>
        <InputText class="form-control" @bind-Value="applicant.PhoneNumber" />
    </div>
    <button class="btn btn-primary" type="submit">Submit</button>
</EditForm>

@code {
    private Applicant applicant = new Applicant
        {
            ApplicationDate = DateTime.Today,
            DeclarationDate = DateTime.Today,
            Status = "Pending"
        };

    private List<Sex> Sexes = new();
    private List<MaritalStatus> MaritalStatuses = new();
    private List<County> Counties = new();
    private List<SubCounty> SubCounties = new();
    private List<Location> Locations = new();
    private List<SubLocation> SubLocations = new();
    private List<Village> Villages = new();

    private int? selectedCountyId;
    private int? selectedSubCountyId;
    private int? selectedLocationId;
    private int? selectedSubLocationId;

    protected override async Task OnInitializedAsync()
    {
        Sexes = await geoService.GetSexesAsync();
        MaritalStatuses = await geoService.GetMaritalStatusesAsync();
        Counties = await geoService.GetCountiesAsync();
    }

    private async Task OnCountyChanged(ChangeEventArgs e)
    {
        if (selectedCountyId.HasValue)
        {
            SubCounties = (await geoService.GetSubCountiesByCountyIdAsync(selectedCountyId.Value)).ToList();
        }
        else
        {
            SubCounties.Clear();
        }
        Locations.Clear();
        SubLocations.Clear();
        Villages.Clear();
    }

    private async Task OnSubCountyChanged(ChangeEventArgs e)
    {
        selectedSubCountyId = int.TryParse(e.Value?.ToString(), out var id) ? id : null;
        if (selectedSubCountyId.HasValue)
        {
            Locations = (await geoService.GetLocationsBySubCountyIdAsync(selectedSubCountyId.Value)).ToList(); ;
        }
        else
        {
            Locations.Clear();
        }
        SubLocations.Clear();
        Villages.Clear();
    }

    private async Task OnLocationChanged(ChangeEventArgs e)
    {
        selectedLocationId = int.TryParse(e.Value?.ToString(), out var id) ? id : null;
        if (selectedLocationId.HasValue)
        {
            SubLocations = (await geoService.GetSubLocationsByLocationIdAsync(selectedLocationId.Value)).ToList();
        }
        Villages.Clear();
    }
    private async Task OnVillagesChanged(ChangeEventArgs e)
    {
        selectedLocationId = int.TryParse(e.Value?.ToString(), out var id) ? id : null;

        Villages = (await geoService.GetVillagesBySubLocationIdAsync(selectedLocationId.Value)).ToList();
    }
    private async Task OnSubLocationChanged(ChangeEventArgs e)
    {
        selectedSubLocationId = int.TryParse(e.Value?.ToString(), out var id) ? id : null;
        if (selectedSubLocationId.HasValue)
        {
            Villages = (await geoService.GetVillagesBySubLocationIdAsync(selectedSubLocationId.Value)).ToList();
        }
    }

    private async Task HandleValidSubmit()
    {
        await applicantService.AddApplicantAsync(applicant);
    }
}
